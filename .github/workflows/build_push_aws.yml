name: Build and Push Docker Image to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.event.repository.name }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Create a new builder that supports cache export/import
    - name: Create a new builder
      run: docker buildx create --name mybuilder --use

    # Cache setup
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/github_action
        aws-region: ${{secrets.AWS_REGION}}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Create ECR repository if it doesn't exist
      run: |
        if ! aws ecr describe-repositories --repository-names ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}; then
          aws ecr create-repository --repository-name ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        
      run: |
        docker buildx build \
          --build-arg OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}} \
          --build-arg GTB_ACCESS_TOKEN=${{secrets.GTB_ACCESS_TOKEN}} \
          --build-arg AWS_REGION=${{secrets.AWS_REGION}} \
          --build-arg AMAZON_ACCESS_KEY=${{secrets.AMAZON_ACCESS_KEY}} \
          --build-arg AMAZON_SECRET_ACCESS_KEY=${{secrets.AMAZON_SECRET_ACCESS_KEY}} \
          -t $ECR_REGISTRY/${{env.REPO_NAME}} \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          --push \
          ./my_langserve
        

    # Updating cache
    - name: Update cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache-new
        key: ${{ runner.os }}-buildx-${{ github.sha }}

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{secrets.AMAZON_HOST}}
        username: ${{secrets.AMAZON_USER}}
        key: ${{secrets.AMAZON_PEM}}
        script: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Deploying to EC2..."
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          REPO_NAME="${{ env.REPO_NAME }}"
          AWS_ACCESS_KEY_ID="${{ secrets.AMAZON_ACCESS_KEY }}"
          AWS_SECRET_ACCESS_KEY="${{ secrets.AMAZON_SECRET_ACCESS_KEY }}"
          AWS_REGION="${{ secrets.AWS_REGION }}"
          echo "Installing AWS CLI..."
          sudo apt-get update
          sudo apt-get install awscli -y
          echo "Logging into Docker ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          echo "Pulling image $ECR_REGISTRY/$REPO_NAME..."
          docker pull $ECR_REGISTRY/$REPO_NAME
          echo "Stopping existing container..."
          docker stop mycontainer || true
          echo "Removing existing container..."
          docker rm mycontainer || true
          
          echo "Running mycontainer..."
          docker run --rm -d \
          --log-driver=awslogs \
          --log-opt awslogs-group=mycontainer \
          --log-opt awslogs-region=$AWS_REGION \
          --log-opt awslogs-stream=mycontainer-stream \
          -p 8000:8000 -p 9001:9001 \
          -v /config_cf.yaml:/config_cf.yaml \
          --name mycontainer $ECR_REGISTRY/$REPO_NAME

          echo "Setting up startup script..."
          echo "#!/bin/bash
          docker pull $ECR_REGISTRY/$REPO_NAME
          docker stop mycontainer || true
          docker rm mycontainer || true
          docker run --rm -d \
          --log-driver=awslogs \
          --log-opt awslogs-group=mycontainer \
          --log-opt awslogs-region=$AWS_REGION \
          --log-opt awslogs-stream=mycontainer-stream \
          -p 8000:8000 -p 9001:9001 \
          -v /config_cf.yaml:/config_cf.yaml \
          --name mycontainer $ECR_REGISTRY/$REPO_NAME" > /home/ec2-user/start_container.sh
          chmod +x /home/ec2-user/start_container.sh
          (crontab -l 2>/dev/null; echo "@reboot /home/ec2-user/start_container.sh") | crontab -

          echo "Remove Unused Images:"
          docker image prune -a --force --filter "until=24h"

          echo "Deployment to EC2 completed."



