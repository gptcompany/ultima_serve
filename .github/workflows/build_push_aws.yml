name: Build and Push Docker Image to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECS_CLUSTER: ultimaecs2
      ECS_SERVICE: test_service
      IMAGE_TAG: latest
      TASK_DEFINITION_TAG: test
      TASK_DEFINITION_REVISION: 3

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Test AWS CLI Authentication
      run: aws ecs list-clusters
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AMAZON_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AMAZON_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }} # Directly specify the region

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Create a new builder that supports cache export/import
    - name: Create a new builder
      run: docker buildx create --name mybuilder --use

    # Cache setup
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{secrets.AWS_REGION}}
        role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/github_action
        

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Create ECR repository if it doesn't exist
      run: |
        if ! aws ecr describe-repositories --repository-names ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}; then
          aws ecr create-repository --repository-name ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        
      run: |
        docker buildx build \
          --build-arg OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}} \
          --build-arg GTB_ACCESS_TOKEN=${{secrets.GTB_ACCESS_TOKEN}} \
          --build-arg AWS_REGION=${{secrets.AWS_REGION}} \
          --build-arg AMAZON_ACCESS_KEY=${{secrets.AMAZON_ACCESS_KEY}} \
          --build-arg AMAZON_SECRET_ACCESS_KEY=${{secrets.AMAZON_SECRET_ACCESS_KEY}} \
          -t $ECR_REGISTRY/${{env.REPO_NAME}}:$IMAGE_TAG \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          --push \
          ./my_langserve
        

    # Updating cache
    - name: Update cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache-new
        key: ${{ runner.os }}-buildx-${{ github.sha }}

    
    - name: Describe ECS Services (Debugging)
      run: aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE

    - name: Delete ECS Service if Inactive
      run: |
        SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE | jq -r ".services[] | select(.serviceName == \"${ECS_SERVICE}\") | .status")
        if [ "$SERVICE_STATUS" == "INACTIVE" ]; then
          aws ecs delete-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force
        fi
#####################to remove this step##################
    - name: Check if ECS Service Exists
      id: check_service
      run: |
        SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE | jq ".services[] | select(.serviceName == \"${ECS_SERVICE}\") | .serviceName")
        if [ -z "$SERVICE_EXISTS" ]; then
          echo "SERVICE_DOES_NOT_EXIST=true" >> $GITHUB_ENV
        else
          echo "SERVICE_DOES_NOT_EXIST=false" >> $GITHUB_ENV
        fi

    - name: Create ECS Service if Not Exists
      #if: env.SERVICE_DOES_NOT_EXIST == 'true'
      run: |
        aws ecs create-service \
          --cluster $ECS_CLUSTER \
          --service-name $ECS_SERVICE \
          --task-definition $TASK_DEFINITION_TAG:$TASK_DEFINITION_REVISION \
          --desired-count 1 \
          --deployment-configuration "deploymentCircuitBreaker={enable=true,rollback=true},maximumPercent=200,minimumHealthyPercent=100" \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-ab24e2e3,subnet-a035fc8b,subnet-a1d2e2fa],securityGroups=[sg-6c5b961e],assignPublicIp=DISABLED}" \
          --scheduling-strategy REPLICA \
          --placement-strategy "type=spread,field=attribute:ecs.availability-zone" "type=spread,field=instanceId" \
          --deployment-controller "type=ECS"
      

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEFINITION_TAG:$TASK_DEFINITION_REVISION

    - name: Check ECS Service Status
      run: |
        aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE


      #don't use if OIDC authentication
      # env:
      #   AWS_ACCESS_KEY_ID: ${{ secrets.AMAZON_ACCESS_KEY }}
      #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AMAZON_SECRET_ACCESS_KEY }}
      #   AWS_REGION: ${{ secrets.AWS_REGION }}







