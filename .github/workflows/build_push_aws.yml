name: Build and Push Docker Image to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECS_CLUSTER: ultimaecs2
      ECS_SERVICE: test_service
      IMAGE_TAG: latest
      TASK_DEFINITION_TAG: test
      TASK_DEFINITION_REVISION: 2 
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Create a new builder that supports cache export/import
    - name: Create a new builder
      run: docker buildx create --name mybuilder --use

    # Cache setup
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/github_action
        aws-region: ${{secrets.AWS_REGION}}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Create ECR repository if it doesn't exist
      run: |
        if ! aws ecr describe-repositories --repository-names ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}; then
          aws ecr create-repository --repository-name ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        
      run: |
        docker buildx build \
          --build-arg OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}} \
          --build-arg GTB_ACCESS_TOKEN=${{secrets.GTB_ACCESS_TOKEN}} \
          --build-arg AWS_REGION=${{secrets.AWS_REGION}} \
          --build-arg AMAZON_ACCESS_KEY=${{secrets.AMAZON_ACCESS_KEY}} \
          --build-arg AMAZON_SECRET_ACCESS_KEY=${{secrets.AMAZON_SECRET_ACCESS_KEY}} \
          -t $ECR_REGISTRY/${{env.REPO_NAME}}:$IMAGE_TAG \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          --push \
          ./my_langserve
        

    # Updating cache
    - name: Update cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache-new
        key: ${{ runner.os }}-buildx-${{ github.sha }}

    - name: Deploy to ECS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AMAZON_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AMAZON_SECRET_ACCESS_KEY }}
        AWS_REGION: $AWS_REGION
      run: |
        ECR_IMAGE="$ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG"
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --task-definition $TASK_DEFINITION_TAG:$TASK_DEFINITION_REVISION





